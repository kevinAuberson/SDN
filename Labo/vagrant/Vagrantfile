# -*- mode: ruby -*-
# vi: set ft=ruby :

# Configuration API de Vagrant
VAGRANTFILE_API_VERSION = "2"

# Variables d'environnement pour la configuration
ENV['F5_LICENSE'] ||= 'MNCEC-LYWCI-BWNHX-BSBGX-LHFOPSV' # Clé de licence pour BIG-IP
ENV['F5_MGMT_IP'] ||= '10.10.1.9' # IP pour la gestion de BIG-IP
ENV['F5_BACKEND_IP'] ||= '192.168.10.20' # IP pour le VLAN Backend sur BIG-IP
ENV['UBUNTU_MGMT_IP'] ||= '192.168.10.10' # IP pour la gestion de la VM Ubuntu
ENV['UBUNTU_BOX_PATH'] ||= 'file://c:/temp/focal-server-cloudimg-amd64-vagrant.box'
ENV['F5_BOX_PATH'] ||= 'file://c:/temp/F5-BIGIP-14.0.1-boeboe.box'

# Commande pour vérifier l'état de BIG-IP
WAIT_FOR_BIGIP = <<SHELL
for retries in {1..100} ; do
  tmsh -a show sys mcp-state field-fmt 2>/dev/null | grep phase | grep running
  rc=$?
  if [ $rc -eq 0 ]; then
    echo "mcpd is running"
    break
  fi
  echo "Waiting for mcpd to start..."
  sleep 30
done
if [ $rc -ne 0 ]; then
  echo "mcpd did not start in time!"
  tmsh -a show sys mcp-state field-fmt
fi
SHELL

# Configuration de Vagrant
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Configuration de la VM F5 BIG-IP
  config.vm.define "F5" do |f5|
    f5.vm.box = "F5"
	f5.vm.box_url = ENV['F5_BOX_PATH']
	f5.vm.network "private_network", ip: ENV['F5_BACKEND_IP']
	f5.vm.network "private_network", ip: ENV['F5_MGMT_IP']
	f5.vm.network "forwarded_port", guest: 443, host: 8443, protocol: "tcp"  # Accès HTTPS pour AS3
    f5.vm.synced_folder ".", "/vagrant", disabled: true
	f5.vm.provider "virtualbox" do |vb|
      vb.memory = "6144"
      vb.cpus = 2
    end
	f5.vm.boot_timeout = 600
    f5.vm.provision "shell", inline: <<-SHELL
      #{WAIT_FOR_BIGIP}
		  tmsh load /sys config default
		      tmsh modify /sys dns name-servers add { 10.193.64.16 }
		      tmsh modify /sys ntp servers add { ntp.metas.ch }
          sleep 10
          /usr/local/bin/SOAPLicenseClient --basekey  #{ENV['BIGIP_LICENSE']}
          sleep 10
      #{WAIT_FOR_BIGIP}
		# Configuration réseau
		tmsh modify sys db setup.run value false

        # VLAN Backend
        tmsh create net vlan backend interfaces add { 1.1 } description "Backend VLAN"
        tmsh create net self backend-ip address #{ENV['F5_BACKEND_IP']}/24 vlan backend allow-service all

        # VLAN Servers
        tmsh create net vlan servers interfaces add { 1.2 } description "Servers VLAN"
        tmsh create net self server-ip address #{ENV['F5_MGMT_IP']}/24 vlan servers allow-service all

        # Réserve d'adresses Self-IP pour VIPs
        tmsh create net self vip-reserve-1 address 10.10.1.30/24 vlan servers allow-service all traffic-group traffic-group-1
        tmsh create net self vip-reserve-2 address 10.10.1.31/24 vlan servers allow-service all traffic-group traffic-group-1
        tmsh create net self vip-reserve-3 address 10.10.1.32/24 vlan servers allow-service all traffic-group traffic-group-1
        tmsh create net self vip-reserve-4 address 10.10.1.33/24 vlan servers allow-service all traffic-group traffic-group-1
        tmsh create net self vip-reserve-5 address 10.10.1.34/24 vlan servers allow-service all traffic-group traffic-group-1

        tmsh save /sys config
    SHELL
  end

  # Configuration de la VM Ubuntu
  config.vm.define "ubuntu" do |ubuntu|
    ubuntu.vm.box = "Ubuntu"
    ubuntu.vm.box_url = ENV['UBUNTU_BOX_PATH']
	ubuntu.vm.network "private_network", ip: ENV['UBUNTU_MGMT_IP']
	ubuntu.vm.network :forwarded_port, guest: 5000, host: 5000, id: "flask"
    ubuntu.vm.provision "shell", inline: <<-SHELL
      cd /vagrant/scripts
      ./ubuntu-setup.sh
    SHELL
  end
end
